// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict'

var Knex = require('knex')
var Config = require('../Config.bs.js')
var Js_option = require('bs-platform/lib/js/js_option.js')
var Js_primitive = require('bs-platform/lib/js/js_primitive.js')

function make () {
  return new Promise(function (resolve, reject) {
    var connection = {
      host: Js_option.getWithDefault(
        'localhost',
        Js_primitive.null_undefined_to_opt(Config.Database[/* hostname */ 5])
      ),
      port: Js_option.getWithDefault(
        '5432',
        Js_primitive.null_undefined_to_opt(Config.Database[/* port */ 6])
      ),
      user: Js_option.getWithDefault(
        'trailmap',
        Js_primitive.null_undefined_to_opt(Config.Database[/* username */ 3])
      ),
      password: Js_option.getWithDefault(
        'trailmap',
        Js_primitive.null_undefined_to_opt(Config.Database[/* password */ 4])
      ),
      database: Js_option.getWithDefault(
        'trailmap',
        Js_primitive.null_undefined_to_opt(Config.Database[/* name */ 2])
      ),
    }
    var pool = {
      min: Config.Database[/* poolMin */ 7],
      max: Config.Database[/* poolMax */ 8],
      idleTimeoutMillis: Config.Database[/* poolIdle */ 9],
    }
    var config = {
      client: 'pg',
      connection: connection,
      pool: pool,
      acquireConnectionTimeout: 2000,
    }
    var knex = Knex(config)
    knex
      .raw('select now()')
      .then(function (result) {
        resolve(/* record */ [/* knex */ knex])
        return Promise.resolve(result)
      })
      .catch(function () {
        var message = 'Unable to connect to Knex. Ensure valid connection'
        console.log(message)
        reject(new Error(message))
        return Promise.reject(new Error(message))
      })
    return /* () */ 0
  })
}

exports.make = make
/* knex Not a pure module */
