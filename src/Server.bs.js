// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict'

var Cors = require('cors')
var Debug = require('bs-node-debug/src/Debug.bs.js')
var Chalk = require('chalk')
var Config = require('./Config.bs.js')
var Router = require('./Router.bs.js')
var Morgan = require('morgan')
var Express = require('bs-express/src/express.js')
var Express$1 = require('express')
var Process = require('process')
var BodyParser = require('body-parser')
var DataProvider = require('./data/DataProvider.bs.js')
var ApolloServerExpress = require('bs-apollo-server-express/src/ApolloServerExpress.js')

var debug = Debug.make('reason-graphql-docker', 'Server')

var debugExn = Debug.make('reason-graphql-docker', 'Server:exn')

var graphiqlMiddleware = ApolloServerExpress.createGraphiQLExpressMiddleware(
  /* None */ 0,
  /* None */ 0,
  /* None */ 0,
  /* None */ 0,
  '/graphql'
)

function onListen (exn) {
  if (exn == null) {
    console.log(
      Chalk.blue('reason-graphql-docker') +
        (' is listening on port ' +
          Chalk.green(Config.Server[/* port */ 0].toString()))
    )
    return /* () */ 0
  } else {
    debug('Express listen error')
    return debugExn(exn)
  }
}

function start (graphRouter) {
  var app = Express$1()
  var match = Config.Server[/* isDev */ 3]
  if (match !== 0) {
    app.use(Morgan('dev'))
  } else {
    app.use(Morgan('combined'))
  }
  app.use(
    Cors({
      exposedHeaders: Config.Server[/* corsHeaders */ 2],
    })
  )
  app.use(
    BodyParser.json({
      limit: Config.Server[/* bodyLimit */ 1],
    })
  )
  app.use('/graphql', graphRouter)
  if (Config.Server[/* isDev */ 3]) {
    app.use('/graphiql', graphiqlMiddleware)
  }
  app.use(Router.Web[/* make */ 0](/* () */ 0))
  return Express.App[/* listen */ 0](
    app,
    /* Some */ [Config.Server[/* port */ 0]],
    /* Some */ [onListen],
    /* () */ 0
  )
}

function main () {
  return DataProvider.make(/* () */ 0)
    .then(function (dataProvider) {
      var graphRouter = Router.GraphQL[/* make */ 5](dataProvider)
      start(graphRouter)
      return Promise.resolve(/* () */ 0)
    })
    .catch(function (error) {
      debug('Uncaught server error')
      debugExn(error)
      Process.exit(1)
      return Promise.resolve(/* () */ 0)
    })
}

if (require.main === module) {
  main(/* () */ 0)
}

exports.debug = debug
exports.debugExn = debugExn
exports.graphiqlMiddleware = graphiqlMiddleware
exports.onListen = onListen
exports.start = start
exports.main = main
/* debug Not a pure module */
