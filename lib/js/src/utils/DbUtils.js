// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict'

var ErrorUtils = require('./ErrorUtils.js')

var debug = ErrorUtils.Debug[/* make */ 1]('DbUtils')

var debugExn = ErrorUtils.Debug[/* make */ 1]('DbUtils:exn')

var invalidTextRepresentation = '22P02'

var uniqueViolation = '23505'

function handleUniqueError (name, message, promise) {
  return promise.catch(function (exn) {
    var $$continue = Promise.reject(exn)
    var codeOpt = exn.code
    if (codeOpt == null) {
      return $$continue
    } else if (codeOpt === uniqueViolation) {
      var constraintOpt = exn.constraint
      if (!(constraintOpt == null) && constraintOpt === name) {
        return Promise.reject(new Error(message))
      } else {
        return $$continue
      }
    } else {
      return $$continue
    }
  })
}

function handleDbErrors (promise) {
  return promise.catch(function (exn) {
    var codeOpt = exn.code
    if (codeOpt == null) {
      debug('Unhandled error:')
      debugExn(exn)
      return Promise.reject(new Error('A database error occurred.'))
    } else if (codeOpt === uniqueViolation) {
      return Promise.reject(new Error('A unique constraint was violated.'))
    } else if (codeOpt === invalidTextRepresentation) {
      var routineOpt = exn.routine
      if (routineOpt == null) {
        return Promise.reject(
          new Error('The database received an invalid text representation.')
        )
      } else if (routineOpt === 'string_to_uuid') {
        return Promise.reject(
          new Error('The database received an invalid format for a UUID')
        )
      } else {
        return Promise.reject(
          new Error('The database received an invalid text representation.')
        )
      }
    } else {
      debug('Unhandled error:')
      debugExn(exn)
      return Promise.reject(new Error('A database error occurred.'))
    }
  })
}

exports.debug = debug
exports.debugExn = debugExn
exports.invalidTextRepresentation = invalidTextRepresentation
exports.uniqueViolation = uniqueViolation
exports.handleUniqueError = handleUniqueError
exports.handleDbErrors = handleDbErrors
/* debug Not a pure module */
